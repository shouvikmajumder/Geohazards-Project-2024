# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'plot_window.ui'
#
# Created by: PyQt5 UI code generator 5.15.11
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import numpy as np
from scipy import signal
from matplotlib.backends.backend_qt5agg import (NavigationToolbar2QT  as  NavigationToolbar)
from matplotlib import cm
from singleplot import Ui_MainWindow_SingleChannel

class Ui_MainWindow(object):
    def __init__(self,data):
        self.data=data

    def test(self):
        #y = np.arange(0, 100, 1)
        self.MplWidget.canvas.axes.clear()
        self.MplWidget.canvas.axes.clear()
        self.MplWidget.canvas.axes.plot(self.data)
        self.MplWidget.canvas.draw_idle()

    def setup_parameters(self):
        # self.data = self.data_raw
        self.time = int(self.lineEdit_time.text())
        # self.ch1 = int(self.lineEdit_ch1.text()) - 1
        # self.ch2 = int(self.lineEdit_ch2.text()) - 1
        # input channel
        ch = self.lineEdit_ch.text()
        self.channel = np.empty(0, dtype=int)
        ch = ch.split(',')
        for i in range(len(ch)):
            if '-' in ch[i]:
                tmp = ch[i].split('-')
                tmp = range(int(tmp[0]), int(tmp[1]))
                self.channel = np.append(self.channel, tmp)
            else:
                self.channel = np.append(self.channel, int(ch[i]))

        self.fs = int(self.lineEdit_fs.text())
        self.label = np.zeros(60)
        self.cmax = 100

        # self.section=self.section[:,3000 * self.time: 3000 * (self.time + 1)]

        if self.checkBox_normalize.isChecked():
            for i in self.channel:
                self.data[i] = self.data[i] / np.max(self.data[i])
            self.cmax = 1

        self.data = self.data[self.channel]
        # QtWidgets.QMessageBox.about(self, '', 'Complete')

    def BPfilter(self):
        fs = self.fs
        f1 = float(self.lineEdit_freq1.text())
        f2 = float(self.lineEdit_freq2.text())
        nmin = self.data.shape[1] / (fs * 60)
        for i in range(self.data.shape[0]):
            trace0 = self.data[i]
            for j in range(int(nmin)):
                trace = trace0[j * fs * 60:fs * 60 + j * fs * 60]
                trace = trace - trace.mean()
                trace = signal.detrend(trace)
                trace0[j * fs * 60:fs * 60 + j * fs * 60] = trace
            b, a = signal.butter(6, [2 * f1 / fs, 2 * f2 / fs], 'bandpass')
            filtedData = signal.filtfilt(b, a, trace0)
            # filtedData = filtedData * np.hanning(trace0.shape[0])
            self.data[i] = filtedData

    def stft():
        pass

    def selectionchange(self, index):
        self.plot_type = self.cb_PlotType.itemText(index)

    def update_graph(self):
        nt = self.fs * 60
        # t=int(self.lineEdit_time.text())
        # ch1=int(self.lineEdit_ch1.text())-1
        # ch2=int(self.lineEdit_ch2.text())-1
        # section = self.data[self.channel,3000*self.time:3000*(self.time+1)]
        self.section = self.data[:, nt * self.time: nt * (self.time + 1)]
        self.plot_core()

    def plot_next(self):
        nt = self.fs * 60
        if self.time == 59:
            QtWidgets.QMessageBox.about(self, 'Error', 'This is the last slice')
        else:
            self.time = self.time + 1
            self.section = self.data[:, nt * self.time:nt * (self.time + 1)]
            self.plot_core()

    def plot_back(self):
        nt = self.fs * 60
        if self.time == 0:
            QtWidgets.QMessageBox.about(self, 'Error', 'This is the first slice')
        else:
            self.time = self.time - 1
            # section = self.data[self.channel,3000*self.time:3000*(self.time+1)]
            self.section = self.data[:, nt * self.time: nt * (self.time + 1)]
            self.plot_core()

    def test(self):
        self.MplWidget.canvas.axes.clear()
        self.MplWidget.canvas.axes.clear()
        self.MplWidget.canvas.axes.plot(self.ui.pd_series.pd_series.dat.T[967])
        self.MplWidget.canvas.draw_idle()

    def plot_core(self):
        nt = self.fs * 60
        self.MplWidget.canvas.axes.clear()
        self.MplWidget.canvas.axes.clear()
        self.plot_type = 'Color Plot'
        if self.plot_type == 'Color Plot':
            self.MplWidget.canvas.axes.imshow(self.section, vmin=-self.cmax, vmax=self.cmax, aspect='auto',
                                              cmap=cm.seismic)
            self.MplWidget.canvas.axes.xaxis.set(ticks=np.linspace(0, nt, 13),
                                                 ticklabels=np.linspace(0, 60, 13, dtype=int))
            self.MplWidget.canvas.axes.set(ylabel='Channel', xlabel='Time(s)')
            self.MplWidget.canvas.draw_idle()
        elif self.plot_type == 'Wiggle Plot':
            for i in range(self.section.shape[0]):
                times = np.linspace(0, 60, nt)
                self.MplWidget.canvas.axes.plot(times, self.section[i] + i, c="k", linewidth=0.5)
            self.MplWidget.canvas.axes.set(ylabel='Channel', xlabel='Time(s)')
            self.MplWidget.canvas.draw_idle()
        elif self.plot_type == 'Check NCFs':
            times = np.linspace(0, 60, nt)
            tr1 = self.section[0]
            tr2 = self.section[1]
            self.MplWidget.canvas.axes.plot(times, tr1 + 1, c="k", linewidth=0.5)
            self.MplWidget.canvas.axes.plot(times, tr2, c="k", linewidth=0.5)
            self.MplWidget.canvas.draw_idle()
            times0 = np.linspace(-5, 5, 10 * self.fs + 1)
            self.MplWidget.canvas.axes.plot(times0, 1000 * self.xcorr[self.time], c="k", linewidth=0.5)
            self.MplWidget.canvas.draw_idle()

    def start_pick(self):
        self.label = np.zeros(60)

    def pick(self):
        self.label[self.time] = 1

    def reject(self):
        self.label[self.time] = 0

    def export(self):
        np.save('/Users/shenjunzhu/DAS/data/label', self.label)
        QtWidgets.QMessageBox.about(self, '', 'success')
    
    def openSingleChannel(self):
        self.window = QtWidgets.QMainWindow()
        self.ui = Ui_MainWindow_SingleChannel()
        self.ui.setupUi(self.window)
        self.window.show()


    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1036, 624)
        MainWindow.setStyleSheet("QMainWindow{\n"
"\n"
"background: #FFFFFF;\n"
"\n"
"}")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.MplWidget = MplWidget(self.centralwidget)
        self.MplWidget.setMinimumSize(QtCore.QSize(480, 320))
        self.MplWidget.setObjectName("MplWidget")
        self.gridLayout_2.addWidget(self.MplWidget, 2, 1, 1, 1)
        self.frame_3 = QtWidgets.QFrame(self.centralwidget)
        self.frame_3.setMaximumSize(QtCore.QSize(475, 71))
        self.frame_3.setStyleSheet("QFrame{\n"
"background: #0276FF;\n"
"border-radius: 10px\n"
"}")
        self.frame_3.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_3.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_3.setObjectName("frame_3")
        self.formLayout = QtWidgets.QFormLayout(self.frame_3)
        self.formLayout.setObjectName("formLayout")
        self.frame_2 = QtWidgets.QFrame(self.frame_3)
        self.frame_2.setStyleSheet("QFrame{\n"
"border: None;\n"
"}")
        self.frame_2.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_2.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_2.setObjectName("frame_2")
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout(self.frame_2)
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.pushButton_SingleChannel = QtWidgets.QPushButton(self.frame_2)
        self.pushButton_SingleChannel.setObjectName("pushButton_SingleChannel")
        self.horizontalLayout_3.addWidget(self.pushButton_SingleChannel)
        self.lineEdit_time_SingelChannel = QtWidgets.QLineEdit(self.frame_2)
        self.lineEdit_time_SingelChannel.setTabletTracking(False)
        self.lineEdit_time_SingelChannel.setStyleSheet("QLineEdit{\n"
"background: rgb(255,255,255);\n"
"color: rgb(11, 7, 4);\n"
"}\n"
"")
        self.lineEdit_time_SingelChannel.setObjectName("lineEdit_time_SingelChannel")
        self.horizontalLayout_3.addWidget(self.lineEdit_time_SingelChannel)
        self.formLayout.setWidget(0, QtWidgets.QFormLayout.LabelRole, self.frame_2)
        self.frame = QtWidgets.QFrame(self.frame_3)
        self.frame.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame.setObjectName("frame")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.frame)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.pushButton_back = QtWidgets.QPushButton(self.frame)
        self.pushButton_back.setObjectName("pushButton_back")
        self.horizontalLayout.addWidget(self.pushButton_back)
        self.pushButton_next = QtWidgets.QPushButton(self.frame)
        self.pushButton_next.setObjectName("pushButton_next")
        self.horizontalLayout.addWidget(self.pushButton_next)
        self.formLayout.setWidget(0, QtWidgets.QFormLayout.FieldRole, self.frame)
        self.gridLayout_2.addWidget(self.frame_3, 3, 1, 1, 1)
        self.textBrowser = QtWidgets.QTextBrowser(self.centralwidget)
        self.textBrowser.setMinimumSize(QtCore.QSize(546, 45))
        self.textBrowser.setMaximumSize(QtCore.QSize(546, 45))
        self.textBrowser.setStyleSheet("QTextBrowser{\n"
"border:none;\n"
"background: #FFFFFF;\n"
"color: #000000\n"
"}")
        self.textBrowser.setObjectName("textBrowser")
        self.gridLayout_2.addWidget(self.textBrowser, 0, 1, 1, 1)
        self.frame_5 = QtWidgets.QFrame(self.centralwidget)
        self.frame_5.setMaximumSize(QtCore.QSize(160, 542))
        self.frame_5.setStyleSheet("QFrame{\n"
"background: #0276FF;\n"
"border-radius: 10px\n"
"}")
        self.frame_5.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_5.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_5.setObjectName("frame_5")
        self.gridLayout = QtWidgets.QGridLayout(self.frame_5)
        self.gridLayout.setObjectName("gridLayout")
        self.lineEdit_freq1 = QtWidgets.QLineEdit(self.frame_5)
        self.lineEdit_freq1.setStyleSheet("QLineEdit{\n"
"background: rgb(255,255,255);\n"
"color: rgb(11, 7, 4);\n"
"}\n"
"")
        self.lineEdit_freq1.setObjectName("lineEdit_freq1")
        self.gridLayout.addWidget(self.lineEdit_freq1, 14, 0, 1, 1)
        self.pushButton_test = QtWidgets.QPushButton(self.frame_5)
        self.pushButton_test.setStyleSheet("QPushButton {\n"
"    background-color: transparent;\n"
"    border: none;\n"
"    color: transparent;\n"
"}\n"
"")
        self.pushButton_test.setObjectName("pushButton_test")
        self.gridLayout.addWidget(self.pushButton_test, 22, 0, 1, 1)
        self.checkBox_normalize = QtWidgets.QCheckBox(self.frame_5)
        self.checkBox_normalize.setObjectName("checkBox_normalize")
        self.gridLayout.addWidget(self.checkBox_normalize, 19, 0, 1, 1)
        self.lineEdit_ch = QtWidgets.QLineEdit(self.frame_5)
        self.lineEdit_ch.setStyleSheet("QLineEdit{\n"
"background: rgb(255,255,255);\n"
"color: rgb(11, 7, 4);\n"
"}\n"
"")
        self.lineEdit_ch.setObjectName("lineEdit_ch")
        self.gridLayout.addWidget(self.lineEdit_ch, 8, 0, 1, 1)
        self.pushButton_export = QtWidgets.QPushButton(self.frame_5)
        self.pushButton_export.setStyleSheet("QPushButton {\n"
"    background-color: transparent;\n"
"    border: none;\n"
"    color: transparent;\n"
"}\n"
"")
        self.pushButton_export.setObjectName("pushButton_export")
        self.gridLayout.addWidget(self.pushButton_export, 23, 0, 1, 1)
        self.cb_PlotType = QtWidgets.QComboBox(self.frame_5)
        self.cb_PlotType.setObjectName("cb_PlotType")
        self.cb_PlotType.addItem("")
        self.cb_PlotType.addItem("")
        self.gridLayout.addWidget(self.cb_PlotType, 17, 0, 1, 1)
        self.pushButton_Bandpass = QtWidgets.QPushButton(self.frame_5)
        self.pushButton_Bandpass.setStyleSheet("QPushButton {\n"
"    background-color: transparent;\n"
"    border: none;\n"
"    color: transparent;\n"
"}\n"
"")
        self.pushButton_Bandpass.setObjectName("pushButton_Bandpass")
        self.gridLayout.addWidget(self.pushButton_Bandpass, 16, 0, 1, 1)
        self.pushButton_setup_parameters = QtWidgets.QPushButton(self.frame_5)
        self.pushButton_setup_parameters.setObjectName("pushButton_setup_parameters")
        self.gridLayout.addWidget(self.pushButton_setup_parameters, 20, 0, 1, 1)
        self.pushButton_loadtdms = QtWidgets.QPushButton(self.frame_5)
        self.pushButton_loadtdms.setStyleSheet("QPushButton {\n"
"    background-color: transparent;\n"
"    border: none;\n"
"    color: transparent;\n"
"}\n"
"")
        self.pushButton_loadtdms.setObjectName("pushButton_loadtdms")
        self.gridLayout.addWidget(self.pushButton_loadtdms, 0, 0, 1, 1)
        self.lineEdit_fs = QtWidgets.QLineEdit(self.frame_5)
        self.lineEdit_fs.setStyleSheet("QLineEdit{\n"
"background: rgb(255,255,255);\n"
"color: rgb(11, 7, 4);\n"
"}\n"
"")
        self.lineEdit_fs.setObjectName("lineEdit_fs")
        self.gridLayout.addWidget(self.lineEdit_fs, 3, 0, 1, 1)
        self.pushButton_plot = QtWidgets.QPushButton(self.frame_5)
        self.pushButton_plot.setObjectName("pushButton_plot")
        self.gridLayout.addWidget(self.pushButton_plot, 21, 0, 1, 1)
        self.lineEdit_time = QtWidgets.QLineEdit(self.frame_5)
        self.lineEdit_time.setTabletTracking(False)
        self.lineEdit_time.setStyleSheet("QLineEdit{\n"
"background: rgb(255,255,255);\n"
"color: rgb(11, 7, 4);\n"
"}\n"
"")
        self.lineEdit_time.setObjectName("lineEdit_time")
        self.gridLayout.addWidget(self.lineEdit_time, 6, 0, 1, 1)
        self.lineEdit_freq2 = QtWidgets.QLineEdit(self.frame_5)
        self.lineEdit_freq2.setStyleSheet("QLineEdit{\n"
"background: rgb(255,255,255);\n"
"color: rgb(11, 7, 4);\n"
"}\n"
"")
        self.lineEdit_freq2.setObjectName("lineEdit_freq2")
        self.gridLayout.addWidget(self.lineEdit_freq2, 13, 0, 1, 1)
        self.label_4 = QtWidgets.QLabel(self.frame_5)
        self.label_4.setStyleSheet("QLabel{\n"
"color: rgb(16, 19, 7);\n"
"font-weight: bold;\n"
"font-size: 16px;\n"
"}")
        self.label_4.setObjectName("label_4")
        self.gridLayout.addWidget(self.label_4, 2, 0, 1, 1)
        self.label_3 = QtWidgets.QLabel(self.frame_5)
        self.label_3.setStyleSheet("QLabel{\n"
"color: rgb(16, 19, 7);\n"
"font-weight: bold;\n"
"font-size: 16px;\n"
"}")
        self.label_3.setObjectName("label_3")
        self.gridLayout.addWidget(self.label_3, 12, 0, 1, 1)
        self.label = QtWidgets.QLabel(self.frame_5)
        self.label.setStyleSheet("QLabel{\n"
"color: rgb(16, 19, 7);\n"
"font-weight: bold;\n"
"font-size: 16px;\n"
"}")
        self.label.setObjectName("label")
        self.gridLayout.addWidget(self.label, 5, 0, 1, 1)
        self.label_2 = QtWidgets.QLabel(self.frame_5)
        self.label_2.setStyleSheet("QLabel{\n"
"color: rgb(16, 19, 7);\n"
"font-weight: bold;\n"
"font-size: 16px;\n"
"}")
        self.label_2.setObjectName("label_2")
        self.gridLayout.addWidget(self.label_2, 7, 0, 1, 1)
        self.gridLayout_2.addWidget(self.frame_5, 0, 0, 4, 1)
        self.frame_4 = QtWidgets.QFrame(self.centralwidget)
        self.frame_4.setMaximumSize(QtCore.QSize(162, 44))
        self.frame_4.setStyleSheet("QFrame {\n"
"    background-color: transparent;\n"
"    border: none;\n"
"    color: transparent;\n"
"}\n"
"")
        self.frame_4.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_4.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_4.setObjectName("frame_4")
        self.horizontalLayout_4 = QtWidgets.QHBoxLayout(self.frame_4)
        self.horizontalLayout_4.setObjectName("horizontalLayout_4")
        self.pushButton_reject = QtWidgets.QPushButton(self.frame_4)
        self.pushButton_reject.setStyleSheet("QPushButton {\n"
"    background-color: transparent;\n"
"    border: none;\n"
"    color: transparent;\n"
"}\n"
"")
        self.pushButton_reject.setObjectName("pushButton_reject")
        self.horizontalLayout_4.addWidget(self.pushButton_reject)
        self.pushButton_pick = QtWidgets.QPushButton(self.frame_4)
        self.pushButton_pick.setStyleSheet("QPushButton {\n"
"    background-color: transparent;\n"
"    border: none;\n"
"    color: transparent;\n"
"}\n"
"")
        self.pushButton_pick.setObjectName("pushButton_pick")
        self.horizontalLayout_4.addWidget(self.pushButton_pick)
        self.gridLayout_2.addWidget(self.frame_4, 1, 1, 1, 1)
        self.frame_5.raise_()
        self.MplWidget.raise_()
        self.frame_3.raise_()
        self.frame_4.raise_()
        self.textBrowser.raise_()
        MainWindow.setCentralWidget(self.centralwidget)

        self.pushButton_plot.clicked.connect(self.update_graph)
        self.pushButton_setup_parameters.clicked.connect(self.setup_parameters)
        self.pushButton_back.clicked.connect(self.plot_back)
        self.pushButton_next.clicked.connect(self.plot_next)
        self.pushButton_pick.clicked.connect(self.pick)
        self.pushButton_reject.clicked.connect(self.reject)
        self.pushButton_export.clicked.connect(self.export)
        self.pushButton_Bandpass.clicked.connect(self.BPfilter)

        self.cb_PlotType.currentIndexChanged.connect(self.selectionchange)
        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.pushButton_SingleChannel.setText(_translate("MainWindow", "Single channel"))
        self.lineEdit_time_SingelChannel.setText(_translate("MainWindow", "0"))
        self.pushButton_back.setText(_translate("MainWindow", "Back"))
        self.pushButton_next.setText(_translate("MainWindow", "Next"))
        self.textBrowser.setHtml(_translate("MainWindow", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><meta charset=\"utf-8\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"hr { height: 1px; border-width: 0; }\n"
"li.unchecked::marker { content: \"\\2610\"; }\n"
"li.checked::marker { content: \"\\2612\"; }\n"
"</style></head><body style=\" font-family:\'.AppleSystemUIFont\'; font-size:13pt; font-weight:400; font-style:normal;\">\n"
"<p align=\"center\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:24pt;\">Band Pass Filter </span></p></body></html>"))
        self.lineEdit_freq1.setText(_translate("MainWindow", "0.5"))
        self.pushButton_test.setText(_translate("MainWindow", "test"))
        self.checkBox_normalize.setText(_translate("MainWindow", "Normalization"))
        self.lineEdit_ch.setText(_translate("MainWindow", "0-2120"))
        self.pushButton_export.setText(_translate("MainWindow", "Export"))
        self.cb_PlotType.setItemText(0, _translate("MainWindow", "Color Plot"))
        self.cb_PlotType.setItemText(1, _translate("MainWindow", "Wiggle Plot"))
        self.pushButton_Bandpass.setText(_translate("MainWindow", "BandPass"))
        self.pushButton_setup_parameters.setText(_translate("MainWindow", "Confirm"))
        self.pushButton_loadtdms.setText(_translate("MainWindow", "Load Data (tdms)"))
        self.lineEdit_fs.setText(_translate("MainWindow", "500"))
        self.pushButton_plot.setText(_translate("MainWindow", "Plot"))
        self.lineEdit_time.setText(_translate("MainWindow", "0"))
        self.lineEdit_freq2.setText(_translate("MainWindow", "24"))
        self.label_4.setText(_translate("MainWindow", "Fs"))
        self.label_3.setText(_translate("MainWindow", "Freq"))
        self.label.setText(_translate("MainWindow", "Minute"))
        self.label_2.setText(_translate("MainWindow", "Channel"))
        self.pushButton_reject.setText(_translate("MainWindow", "Reject"))
        self.pushButton_pick.setText(_translate("MainWindow", "Pick"))
from mplwidget import MplWidget
