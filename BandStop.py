# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'BandStop.ui'
#
# Created by: PyQt5 UI code generator 5.15.10
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


# from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5 import QtCore, QtGui, QtWidgets
import numpy as np
from scipy import signal
from matplotlib.backends.backend_qt5agg import (NavigationToolbar2QT  as  NavigationToolbar)
from matplotlib import cm
# from daspy.basic_tools.preprocessing import demeaning, detrending, \


class Ui_MainWindow_BandStop(object):
    def __init__(self,data):
        self.data=data

    def test(self):
        #y = np.arange(0, 100, 1)
        self.MplWidget.canvas.axes.clear()
        self.MplWidget.canvas.axes.clear()
        self.MplWidget.canvas.axes.plot(self.data)
        self.MplWidget.canvas.draw_idle()

    def setup_parameters(self):
        # self.data = self.data_raw
        self.time = int(self.lineEdit_time.text())
        # self.ch1 = int(self.lineEdit_ch1.text()) - 1
        # self.ch2 = int(self.lineEdit_ch2.text()) - 1
        # input channel
        ch = self.lineEdit_ch.text()
        self.channel = np.empty(0, dtype=int)
        ch = ch.split(',')
        for i in range(len(ch)):
            if '-' in ch[i]:
                tmp = ch[i].split('-')
                tmp = range(int(tmp[0]), int(tmp[1]))
                self.channel = np.append(self.channel, tmp)
            else:
                self.channel = np.append(self.channel, int(ch[i]))

        self.fs = int(self.lineEdit_fs.text())
        self.label = np.zeros(60)
        self.cmax = 100

        # self.section=self.section[:,3000 * self.time: 3000 * (self.time + 1)]

        if self.checkBox_normalize.isChecked():
            for i in self.channel:
                self.data[i] = self.data[i] / np.max(self.data[i])
            self.cmax = 1

        self.data = self.data[self.channel]
        # QtWidgets.QMessageBox.about(self, '', 'Complete')
    def _preprocessing(data, detrend, taper):
        if detrend in [True, 'linear', 'detrend']:
            data = detrending(data)
        elif detrend in ['constant', 'demean']:
            data = demeaning(data)
        elif taper:
            taper = (taper, 0.1)[taper is True]
            data = cosine_taper(data, p=taper)
            return data
    def bandstop(data, fs, freqmin, freqmax, corners=4, zerophase=False,
             detrend=True, taper=False):
        """
        Filter data removing data between frequencies 'freqmin' and 'freqmax' using
        Butterworth bandstop filter of 'corners' corners.

        :param data: numpy.ndarray. Data to filter.
        :param fs: Sampling rate in Hz.
        :param freqmin: Stop band low corner frequency.
        :param freqmax: Stop band high corner frequency.
        :param corners: Filter corners / order.
        :param zerophase: If True, apply filter once forwards and once backwards.
            This results in twice the number of corners but zero phase shift in
            the resulting filtered trace.
        :param detrend : str or bool. Specifies whether and how to detrend each
            segment.  'linear' or 'detrend' or True = detrend, 'constant' or
            'demean' = demean.
        :param taper: bool or float. Float means decimal percentage of Tukey taper
            for time dimension (ranging from 0 to 1). True for 0.1 which tapers 5%
            from the beginning and 5% from the end.
        :return: Filtered data.
        """
        data = _preprocessing(data, detrend, taper)
        if len(data.shape) == 1:
            data = data[np.newaxis, :]
        fe = 0.5 * fs
        low = freqmin / fe
        high = freqmax / fe
        # raise for some bad scenarios
        if high > 1:
            high = 1.0
            msg = 'Selected high corner frequency is above Nyquist. Setting ' + \
                'Nyquist as high corner.'
            warnings.warn(msg)
        if low > 1:
            msg = 'Selected low corner frequency is above Nyquist.'
            raise ValueError(msg)
        z, p, k = iirfilter(corners, [low, high],
                            btype='bandstop', ftype='butter', output='zpk')
        sos = zpk2sos(z, p, k)
        data_flt = sosfilt(sos, data)
        if zerophase:
            data_flt = sosfilt(sos, data_flt[:, ::-1])[:, ::-1]

        if len(data_flt) == 1:
            data_flt = data_flt[0]
        return data_flt

    def stft():
        pass

    def selectionchange(self, index):
        self.plot_type = self.cb_PlotType.itemText(index)

    def update_graph(self):
        nt = self.fs * 60
        # t=int(self.lineEdit_time.text())
        # ch1=int(self.lineEdit_ch1.text())-1
        # ch2=int(self.lineEdit_ch2.text())-1
        # section = self.data[self.channel,3000*self.time:3000*(self.time+1)]
        self.section = self.data[:, nt * self.time: nt * (self.time + 1)]
        self.plot_core()

    def plot_next(self):
        nt = self.fs * 60
        if self.time == 59:
            QtWidgets.QMessageBox.about(self, 'Error', 'This is the last slice')
        else:
            self.time = self.time + 1
            self.section = self.data[:, nt * self.time:nt * (self.time + 1)]
            self.plot_core()

    def plot_back(self):
        nt = self.fs * 60
        if self.time == 0:
            QtWidgets.QMessageBox.about(self, 'Error', 'This is the first slice')
        else:
            self.time = self.time - 1
            # section = self.data[self.channel,3000*self.time:3000*(self.time+1)]
            self.section = self.data[:, nt * self.time: nt * (self.time + 1)]
            self.plot_core()

    def test(self):
        self.MplWidget.canvas.axes.clear()
        self.MplWidget.canvas.axes.clear()
        self.MplWidget.canvas.axes.plot(self.ui.pd_series.pd_series.dat.T[967])
        self.MplWidget.canvas.draw_idle()

    def plot_core(self):
        nt = self.fs * 60
        self.MplWidget.canvas.axes.clear()
        self.MplWidget.canvas.axes.clear()
        self.plot_type = 'Color Plot'
        if self.plot_type == 'Color Plot':
            self.MplWidget.canvas.axes.imshow(self.section, vmin=-self.cmax, vmax=self.cmax, aspect='auto',
                                              cmap=cm.seismic)
            self.MplWidget.canvas.axes.xaxis.set(ticks=np.linspace(0, nt, 13),
                                                 ticklabels=np.linspace(0, 60, 13, dtype=int))
            self.MplWidget.canvas.axes.set(ylabel='Channel', xlabel='Time(s)')
            self.MplWidget.canvas.draw_idle()
        elif self.plot_type == 'Wiggle Plot':
            for i in range(self.section.shape[0]):
                times = np.linspace(0, 60, nt)
                self.MplWidget.canvas.axes.plot(times, self.section[i] + i, c="k", linewidth=0.5)
            self.MplWidget.canvas.axes.set(ylabel='Channel', xlabel='Time(s)')
            self.MplWidget.canvas.draw_idle()
        elif self.plot_type == 'Check NCFs':
            times = np.linspace(0, 60, nt)
            tr1 = self.section[0]
            tr2 = self.section[1]
            self.MplWidget.canvas.axes.plot(times, tr1 + 1, c="k", linewidth=0.5)
            self.MplWidget.canvas.axes.plot(times, tr2, c="k", linewidth=0.5)
            self.MplWidget.canvas.draw_idle()
            times0 = np.linspace(-5, 5, 10 * self.fs + 1)
            self.MplWidget.canvas.axes.plot(times0, 1000 * self.xcorr[self.time], c="k", linewidth=0.5)
            self.MplWidget.canvas.draw_idle()

    def start_pick(self):
        self.label = np.zeros(60)

    def pick(self):
        self.label[self.time] = 1

    def reject(self):
        self.label[self.time] = 0

    def export(self):
        np.save('/Users/shenjunzhu/DAS/data/label', self.label)
        QtWidgets.QMessageBox.about(self, '', 'success')

    def setupUi(self, MainWindow_BandStop):
        MainWindow_BandStop.setObjectName("MainWindow_BandStop")
        MainWindow_BandStop.resize(800, 600)
        self.centralwidget_BandStop = QtWidgets.QWidget(MainWindow_BandStop)
        self.centralwidget_BandStop.setObjectName("centralwidget_BandStop")
        self.frame_3_BandStop = QtWidgets.QFrame(self.centralwidget_BandStop)
        self.frame_3_BandStop.setGeometry(QtCore.QRect(30, 80, 761, 381))
        self.frame_3_BandStop.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_3_BandStop.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_3_BandStop.setObjectName("frame_3_BandStop")
        self.frame_5_BandStop = QtWidgets.QFrame(self.frame_3_BandStop)
        self.frame_5_BandStop.setGeometry(QtCore.QRect(10, 10, 221, 361))
        self.frame_5_BandStop.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_5_BandStop.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_5_BandStop.setObjectName("frame_5_BandStop")
        self.label_3_BandStop = QtWidgets.QLabel(self.frame_5_BandStop)
        self.label_3_BandStop.setGeometry(QtCore.QRect(10, 180, 59, 16))
        self.label_3_BandStop.setObjectName("label_3_BandStop")
        self.lineEdit_freq2_BandStop = QtWidgets.QLineEdit(self.frame_5_BandStop)
        self.lineEdit_freq2_BandStop.setGeometry(QtCore.QRect(130, 180, 51, 21))
        self.lineEdit_freq2_BandStop.setObjectName("lineEdit_freq2_BandStop")
        self.pushButton_test_BandStop = QtWidgets.QPushButton(self.frame_5_BandStop)
        self.pushButton_test_BandStop.setGeometry(QtCore.QRect(70, 210, 113, 32))
        self.pushButton_test_BandStop.setObjectName("pushButton_test_BandStop")
        self.label_4_BandStop = QtWidgets.QLabel(self.frame_5_BandStop)
        self.label_4_BandStop.setGeometry(QtCore.QRect(10, 10, 59, 16))
        self.label_4_BandStop.setObjectName("label_4_BandStop")
        self.lineEdit_ch_BandStop = QtWidgets.QLineEdit(self.frame_5_BandStop)
        self.lineEdit_ch_BandStop.setGeometry(QtCore.QRect(70, 100, 111, 21))
        self.lineEdit_ch_BandStop.setObjectName("lineEdit_ch_BandStop")
        self.pushButton_setup_parameters_BandStop = QtWidgets.QPushButton(self.frame_5_BandStop)
        self.pushButton_setup_parameters_BandStop.setGeometry(QtCore.QRect(70, 140, 113, 32))
        self.pushButton_setup_parameters_BandStop.setObjectName("pushButton_setup_parameters_BandStop")
        self.checkBox_normalize_BandStop = QtWidgets.QCheckBox(self.frame_5_BandStop)
        self.checkBox_normalize_BandStop.setGeometry(QtCore.QRect(70, 120, 111, 20))
        self.checkBox_normalize_BandStop.setObjectName("checkBox_normalize_BandStop")
        self.pushButton_export_BandStop = QtWidgets.QPushButton(self.frame_5_BandStop)
        self.pushButton_export_BandStop.setGeometry(QtCore.QRect(50, 320, 121, 31))
        self.pushButton_export_BandStop.setObjectName("pushButton_export_BandStop")
        self.lineEdit_freq1_BandStop = QtWidgets.QLineEdit(self.frame_5_BandStop)
        self.lineEdit_freq1_BandStop.setGeometry(QtCore.QRect(70, 180, 51, 21))
        self.lineEdit_freq1_BandStop.setObjectName("lineEdit_freq1_BandStop")
        self.label_2_BandStop = QtWidgets.QLabel(self.frame_5_BandStop)
        self.label_2_BandStop.setGeometry(QtCore.QRect(10, 100, 59, 16))
        self.label_2_BandStop.setObjectName("label_2_BandStop")
        self.lineEdit_fs_BandStop = QtWidgets.QLineEdit(self.frame_5_BandStop)
        self.lineEdit_fs_BandStop.setGeometry(QtCore.QRect(80, 10, 51, 21))
        self.lineEdit_fs_BandStop.setObjectName("lineEdit_fs_BandStop")
        self.label_5_BandStop = QtWidgets.QLabel(self.frame_5_BandStop)
        self.label_5_BandStop.setGeometry(QtCore.QRect(10, 40, 59, 16))
        self.label_5_BandStop.setObjectName("label_5_BandStop")
        self.lineEdit_fs_2_BandStop = QtWidgets.QLineEdit(self.frame_5_BandStop)
        self.lineEdit_fs_2_BandStop.setGeometry(QtCore.QRect(80, 40, 51, 21))
        self.lineEdit_fs_2_BandStop.setText("")
        self.lineEdit_fs_2_BandStop.setObjectName("lineEdit_fs_2_BandStop")
        self.label_6_BandStop = QtWidgets.QLabel(self.frame_5_BandStop)
        self.label_6_BandStop.setGeometry(QtCore.QRect(10, 70, 59, 16))
        self.label_6_BandStop.setObjectName("label_6_BandStop")
        self.lineEdit_fs_3_BandStop = QtWidgets.QLineEdit(self.frame_5_BandStop)
        self.lineEdit_fs_3_BandStop.setGeometry(QtCore.QRect(80, 70, 51, 21))
        self.lineEdit_fs_3_BandStop.setText("")
        self.lineEdit_fs_3_BandStop.setObjectName("lineEdit_fs_3_BandStop")
        self.frame_6_BandStop = QtWidgets.QFrame(self.frame_3_BandStop)
        self.frame_6_BandStop.setGeometry(QtCore.QRect(240, 10, 511, 361))
        self.frame_6_BandStop.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_6_BandStop.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_6_BandStop.setObjectName("frame_6_BandStop")
        self.MplWidget_3_BandStop = MplWidget(self.frame_6_BandStop)
        self.MplWidget_3_BandStop.setGeometry(QtCore.QRect(20, 10, 480, 331))
        self.MplWidget_3_BandStop.setMinimumSize(QtCore.QSize(480, 320))
        self.MplWidget_3_BandStop.setObjectName("MplWidget_3_BandStop")
        self.textBrowser = QtWidgets.QTextBrowser(self.centralwidget_BandStop)
        self.textBrowser.setGeometry(QtCore.QRect(290, 20, 301, 41))
        self.textBrowser.setObjectName("textBrowser")
        MainWindow_BandStop.setCentralWidget(self.centralwidget_BandStop)
        self.statusbar = QtWidgets.QStatusBar(MainWindow_BandStop)
        self.statusbar.setObjectName("statusbar")
        MainWindow_BandStop.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow_BandStop)
        QtCore.QMetaObject.connectSlotsByName(MainWindow_BandStop)

    def retranslateUi(self, MainWindow_BandStop):
        _translate = QtCore.QCoreApplication.translate
        MainWindow_BandStop.setWindowTitle(_translate("MainWindow_BandStop", "MainWindow"))
        self.label_3_BandStop.setText(_translate("MainWindow_BandStop", "Freq"))
        self.lineEdit_freq2_BandStop.setText(_translate("MainWindow_BandStop", "24"))
        self.pushButton_test_BandStop.setText(_translate("MainWindow_BandStop", "test"))
        self.label_4_BandStop.setText(_translate("MainWindow_BandStop", "Fs"))
        self.lineEdit_ch_BandStop.setText(_translate("MainWindow_BandStop", "0-2120"))
        self.pushButton_setup_parameters_BandStop.setText(_translate("MainWindow_BandStop", "Confirm"))
        self.checkBox_normalize_BandStop.setText(_translate("MainWindow_BandStop", "Normalization"))
        self.pushButton_export_BandStop.setText(_translate("MainWindow_BandStop", "Export"))
        self.lineEdit_freq1_BandStop.setText(_translate("MainWindow_BandStop", "0.5"))
        self.label_2_BandStop.setText(_translate("MainWindow_BandStop", "Channel"))
        self.lineEdit_fs_BandStop.setText(_translate("MainWindow_BandStop", "500"))
        self.label_5_BandStop.setText(_translate("MainWindow_BandStop", "Freq Min"))
        self.label_6_BandStop.setText(_translate("MainWindow_BandStop", "Freq Max"))
        self.textBrowser.setHtml(_translate("MainWindow_BandStop", "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.0//EN\" \"http://www.w3.org/TR/REC-html40/strict.dtd\">\n"
"<html><head><meta name=\"qrichtext\" content=\"1\" /><meta charset=\"utf-8\" /><style type=\"text/css\">\n"
"p, li { white-space: pre-wrap; }\n"
"hr { height: 1px; border-width: 0; }\n"
"li.unchecked::marker { content: \"\\2610\"; }\n"
"li.checked::marker { content: \"\\2612\"; }\n"
"</style></head><body style=\" font-family:\'.AppleSystemUIFont\'; font-size:13pt; font-weight:400; font-style:normal;\">\n"
"<p align=\"center\" style=\" margin-top:0px; margin-bottom:0px; margin-left:0px; margin-right:0px; -qt-block-indent:0; text-indent:0px;\"><span style=\" font-size:24pt;\">Band Stop Filter </span></p></body></html>"))
from mplwidget import MplWidget
if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow_BandStop = QtWidgets.QMainWindow()
    ui = Ui_MainWindow_BandStop()
    ui.setupUi(MainWindow_BandStop)
    MainWindow_BandStop.show()
    sys.exit(app.exec_())